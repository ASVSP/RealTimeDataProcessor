version: '3'
services:

  producer:
    build: ./producer
    container_name: producer
    environment:
      KAFKA_BROKER: "broker1:19092"
    depends_on:
      - broker1

  zookeeper:
    image: confluentinc/cp-zookeeper:4.1.3-1
    container_name: zookeeper
    tmpfs: "/datalog"
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeperlog:/var/lib/zookeeper

  broker1:
    image: confluentinc/cp-kafka:4.1.3-1
    container_name: broker1
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
    restart: on-failure
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_BROKER_ID: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - broker1:/var/lib/kafka/data
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--zookeeper",
          "zookeeper:2181",
          "--list"
        ]
      interval: 5s
      timeout: 10s
      retries: 5

#  broker2:
#    image: confluentinc/cp-kafka:4.1.3-1
#    container_name: broker2
#    depends_on:
#      zookeeper:
#        condition: service_started
#    ports:
#      - "9093:9093"
#    restart: on-failure
#    environment:
#      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker2:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
#      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
#      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
#      KAFKA_BROKER_ID: 2
#      KAFKA_NUM_PARTITIONS: 4
#      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
#    volumes:
#      - broker2:/var/lib/kafka/data
#    healthcheck:
#      test:
#        [
#          "CMD",
#          "kafka-topics",
#          "--zookeeper",
#          "zookeeper:2181",
#          "--list"
#        ]
#      interval: 5s
#      timeout: 10s
#      retries: 5

  spark-master:
    image: bde2020/spark-master:3.0.1-hadoop3.2
    container_name: spark-master-real
    ports:
      - 8080:8080
      - 7077:7077
    environment:
      - PYSPARK_PYTHON=python3
    env_file:
      - ./config.env
    volumes:
      - ./scripts:/asvsp/scripts

  spark-worker:
    image: bde2020/spark-worker:3.0.1-hadoop3.2
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER=spark://spark-master:7077
    ports:
      - 8081:8081
    env_file:
      - ./config.env

  mongo:
    image: mongo
    container_name: mongodb
    ports:
      - "27018:27017"
    restart: on-failure
    environment:
      MONGO_INITDB_ROOT_USERNAME: asvsp
      MONGO_INITDB_ROOT_PASSWORD: asvsp
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/admin --quiet
      interval: 10s
      timeout: 20s
      retries: 5
    volumes:
      - mongo_db:/data/db

  postgres:
    image: 'postgres:16.1-alpine'
    container_name: postgres
    env_file:
      - ./config.env
    ports:
      - "5433:5432"
    volumes:
      - postgres_db:/var/lib/postgresql/data
      - ./db_setup:/entrypoint-initdb.d
    restart: on-failure
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-q",
          "-d",
          "postgres",
          "-U",
          "asvsp"
        ]
      interval: 10s
      timeout: 20s
      retries: 5

#  superset:
#    image: apache/superset
#    container_name: superset
#    env_file:
#      - ./config.env
#    ports:
#      - 8088:8088
#    volumes:
#      - superset:/app
#    depends_on:
#      - db
#    command: >
#      sh -c "superset fab create-admin --username admin --firstname Superset --lastname Admin --email admin@superset.com --password admin && superset db upgrade && superset init && superset run -p 8088 -h 0.0.0.0"


volumes:
  zookeeperlog:
  mongo_db:
  postgres_db:
  superset:
  broker1:
  broker2:
